import{_ as s,c as a,o as t,a5 as e}from"./chunks/framework.BH2nTJgJ.js";const y=JSON.parse('{"title":"Typescript学习路线","description":"","frontmatter":{"sidebar":{"title":"Typescript学习路线","step":1},"isTimeLine":true,"title":"Typescript学习路线","date":"2025-09-22T00:00:00.000Z","tags":["大前端","vue"],"categories":["大前端"]},"headers":[],"relativePath":"front-end/ts/guide.md","filePath":"front-end/ts/guide.md","lastUpdated":1758510615000}'),l={name:"front-end/ts/guide.md"};function p(n,i,h,k,r,d){return t(),a("div",{"data-pagefind-body":!0},i[0]||(i[0]=[e(`<h1 id="typescript学习路线" tabindex="-1">Typescript学习路线 <a class="header-anchor" href="#typescript学习路线" aria-label="Permalink to &quot;Typescript学习路线&quot;">​</a></h1><p>以下是一份系统的 TypeScript 学习路线图，从零基础到精通分为 5 个阶段，每个阶段明确学习目标、核心内容和实践方向，帮助你循序渐进掌握 TypeScript： 阶段 1：前置知识（1-2 周）—— 扫清学习障碍 目标：具备 JavaScript 基础，理解 TypeScript 与 JavaScript 的关系 核心内容：</p><p>JavaScript 基础回顾</p><ul><li>变量声明（let/const）、数据类型（原始类型 / 引用类型）</li><li>函数（箭头函数、参数默认值、剩余参数）</li><li>数组方法（map/filter/reduce）、对象（解构、展开运算符）</li><li>异步编程（Promise/async/await） TypeScript 入门认知</li><li>为什么需要 TypeScript？（解决 JS 动态类型的痛点：类型错误、代码维护难）</li><li>安装与运行：<code>npm install -g typescript、tsc filename.ts</code> 编译为 JS</li><li>第一个 TS 程序：给变量 / 函数加类型注解（如 <code>let age: number = 20</code>）</li></ul><p>实践：</p><p>用 TS 重写 3 个简单 JS 函数（如求和、数组去重），体验类型检查 阶段 2：核心类型系统（2-3 周）—— 掌握基础语法 目标：熟练使用 TS 基础类型，能独立编写带类型的代码 核心内容：</p><p>基础类型与类型注解</p><ul><li>原始类型：number/string/boolean/null/undefined/symbol</li><li>特殊类型：any（禁用类型检查）、unknown（安全的未知类型）、void（无返回值）、never（永不存在的值，如抛出错误）</li><li>复合类型</li><li>数组：<code>number[]</code> 或 <code>Array&lt;number&gt;</code>、联合类型数组<code>（(string|number)[]）</code></li><li>对象：接口（interface）与类型别名（type）的定义与区别 typescript // 接口（支持继承和合并） <code>interface User { name: string; age?: number }</code> // 类型别名（支持更复杂的组合） <code>type Point = { x: number; y: number }</code></li></ul><p>函数：参数类型、返回值类型、可选参数（?）、函数重载</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 函数重载（处理不同参数类型）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>类型运算基础</p><ul><li>联合类型（|）：<code>string | number</code>表示 “是 string 或 number”</li><li>交叉类型（&amp;）：A &amp; B 表示 “同时满足 A 和 B 的类型”</li><li>类型断言：<code>value as string</code>（告诉 TS 你比它更了解类型）</li><li>配置文件 tsconfig.json</li><li>核心配置：strict（严格模式，必开）、target（编译目标 JS 版本）、module（模块系统）、outDir（输出目录）</li></ul><p>实践：</p><p>定义一个 “用户管理系统” 的基础类型（用户、角色、权限），包含接口继承和联合类型</p><p>阶段 3：进阶类型工具（3-4 周）—— 处理复杂场景 目标：掌握高级类型逻辑，解决工程化中的类型问题 核心内容：</p><p>泛型（Generic）</p><ol><li>基础用法：复用类型逻辑（如 <code>function identity&lt;T&gt;(arg: T): T { return arg }</code>）</li><li>泛型约束：<code>T extends { length: number }</code>（限制泛型范围）</li><li>泛型默认值：<code>function createArray&lt;T = string&gt;(length: number, value: T): T[] { ... }</code></li></ol><p>内置高级类型工具 常用工具：<code>Partial&lt;T&gt;</code>（可选属性）、<code>Pick&lt;T, K&gt;</code>（挑选属性）、<code>Omit&lt;T, K&gt;</code>（排除属性）、<code>ReturnType&lt;T&gt;</code>（获取函数返回值类型） 实战场景：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserUpdate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Partial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 所有属性变为可选（用于更新接口）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { name: string }</span></span></code></pre></div><p>映射类型与条件类型 映射类型：遍历对象属性并修改（如实现自定义 Partial）</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">P</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span></code></pre></div><p>条件类型：T extends U ? X : Y（类型层面的 “if-else”）</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IsNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IsNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><p>类型声明文件（.d.ts） 为 JS 库补充类型（如 <code>declare module &#39;lodash&#39; { ... }</code>） 理解 @types/* 包（社区维护的类型定义，如 @types/react）</p><p>实践：</p><p>实现一个通用的 “数据筛选函数”，用泛型和条件类型支持不同数据结构的筛选 阶段 4：框架与工程化（4-6 周）—— 结合实战落地 目标：在真实项目中应用 TS，解决框架集成的类型问题 核心内容：</p><p>框架集成（选 1-2 个深入） React + TS：</p><ul><li>组件 props 类型（<code>interface Props { name: string }</code>）</li><li>Hooks 类型（<code>useState&lt;string&gt;(&#39;&#39;)</code>、useEffect 依赖类型）</li><li>事件类型（<code>React.MouseEvent&lt;HTMLButtonElement&gt;</code>） Vue + TS：</li><li>选项式 API：defineProps/defineEmits 的类型定义</li><li>组合式 API：<code>ref&lt;string&gt;()</code>、reactive 与接口结合 Node.js + TS：</li><li>内置模块类型（fs/path，需安装 @types/node）</li><li>自定义服务的类型设计（如 Express 中间件类型） 工程化工具</li><li>构建工具：Webpack/Vite 配置 TS（解析 .ts 文件）</li><li>代码检查：ESLint + @typescript-eslint 插件（检查 TS 语法规范）</li><li>测试：Jest + TS（编写带类型的测试用例）</li></ul><p>实践：</p><p>用 TS 开发一个小型框架项目（如 React TodoList 或 Vue 博客前台），包含：</p><ul><li>组件 props / 状态的类型定义</li><li>API 接口数据类型（与后端对接）</li><li>工具函数的泛型封装 阶段 5：深入原理与优化（长期）—— 从 “会用” 到 “精通” 目标：理解 TS 底层逻辑，能设计复杂类型系统并优化性能 核心内容：</li></ul><p>TypeScript 类型系统原理</p><ul><li>结构类型系统（鸭子类型）：“形状匹配” 而非 “名称匹配”</li><li>类型推断机制：变量 / 函数返回值 / 上下文的自动类型推导</li><li>类型兼容性：子类型与超类型的赋值规则 高级类型编程</li><li>递归类型：处理嵌套结构（如 JSON 数据的类型定义）</li><li>分布式条件类型：T extends U ? X : Y 对联合类型的拆分处理</li><li>模板字面量类型：用字符串拼接生成新类型（如 type EventName = on\${string}\`） 性能优化 大型项目的 TS 编译速度优化（exclude/include 配置、tsconfig 增量编译） 避免过度复杂的类型（防止类型检查耗时过长） 源码与生态 阅读 TypeScript 官方文档的 “Advanced Types” 和 “Handbook” 研究优秀开源项目的 TS 实践（如 React、Vue3 的类型设计） 参与 TypeScript 社区讨论（GitHub Issues、Stack Overflow）</li></ul><p>实践：</p><ul><li>实现一个带复杂验证逻辑的 “表单类型系统”，支持：</li><li>字段类型校验（字符串长度、数字范围）</li><li>嵌套表单的类型推导</li><li>错误信息的类型关联</li></ul><p>学习资源推荐</p><ol><li>官方文档：<a href="https://www.typescriptlang.org/docs/" target="_blank" rel="noreferrer">TypeScript Handbook</a>（最权威，必看）</li><li>书籍：<a href="https://book.douban.com/subject/30341704/" target="_blank" rel="noreferrer">《Programming TypeScript》</a>（深入类型系统）、《TypeScript 实战》（国内实战派）</li><li>视频：Matt Pocock 的 TypeScript 教程（YouTube/B 站，生动易懂）</li><li>练习平台：<a href="https://leetcode.cn/problemset/" target="_blank" rel="noreferrer">LeetCode</a> 用 TS 刷题、TypeScript Exercises（类型编程练习）</li></ol><p>按照这个路线图，每天投入 1-2 小时，6-8 个月可达到 “熟练应用” 水平，1 年左右可深入理解原理。关键是每个阶段都要结合实战，避免只学语法不写代码。</p>`,38)]))}const c=s(l,[["render",p]]);export{y as __pageData,c as default};
